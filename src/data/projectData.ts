export const projectDatas = [
    {'title': 'Mingle', 
        'img': 'mingle.svg', 
        'desc': '플레이리스트 공유 SNS 서비스',
        'intro': '다양한 사람들과 취향을 나누는 플레이리스트 공유 플랫폼', 
        'git': 'https://github.com/sonprogrammer/mingle', 
        'team' : true,
        'role': [{participents: '프론트엔드'},'프로젝트에서 다양한 기능을 구현하기 위해 여러 컴포넌트를 제작하고 백엔드와의 원활한 데이터 흐름을 구축함. 이를 위해 UI/UX측면을 고려하여 더욱 효율적으로 구성하려했음. 또한 백엔드에서 제공하는 API를 활용해 프론트엔드에서 사용자의 입력을 처리하고 데이터베이스와 상호작용을 통해 실시간으로 데이터를 받아와 동적으로 화면을 업데이트하는 기능을 구현. 이 과정에서 라이브러리들을 활용하여 상태관리와 API 요청을 처리하여 애플리케이션의 흐름을 유기적으로 연결함.' ], 
        'func': [
            {회원기능:['회원 설명 수정 기능', '회원 정보 수정 기능', '이메일 중복 확인 기능', '팔로잉 유저 추천 기능', '팔로우한 유저 정보 가져오는 기능']},
            {곡관련기능: ['곡 삭제 기능', '곡 좋아요 토글 기능', '최신순으로 곡 가져오기 기능']},
            {플레이리스트: ['플레이리스트 유저 정보 가져오기 기능', '날씨에 따른 플레이리스트 가져오기 기능', '유저 취향의 플레이리스트 가져오는 기능']}
        ],
        'troubleS': [
            {
                title: '날씨 api cors 이슈', 
                reason: 'api 요청시 커스텀 훅을 통해 헤더에 토큰 값을 포함시켜 요청',
                problem: 'openweathermap api는 api 제공자가 제공하는 서비스의 보안을 강화하고 무단 엑세스를 방지하기 위해 Authorization 토큰을 포함하는 것을 허용하지 않음. 이에 따라 브라우저에서 CORS 정책에 의해 요청이 차단되어 오류가 발생함.',
                solve: '기존에 사용하던 커스텀 Axios 인스턴스는 Authorization헤더를 포함하고 하기 때문에 이를 사용하지 않고 기본 axios.get(...) 으로 직접 요청을 보내도록 수정하여 문제를 해결함.'
            }], 
        'reflection': '팀 프로젝트를 하면서 혼자 고민하는 것보다 팀원들과 적극적으로 소통하고 피드백을 주고받는 과정이 더 좋은 결과를 만든다는 점을 깨달았습니다. 다양한 관점에서 문제를 바라보고 서로의 의견을 존중하는 것이 프로젝트 완성도 향상에 큰 도움이 되었습니다.', 
        'skills': ['react.svg', 'typescript.svg', 'styled.svg', 'tailwind.svg', 'figma.svg']
    },
    {'title': 'CAN (Check Again Note)', 
        'img': 'CAN.svg', 
        'desc': '나만의 웹 오답노트 서비스',
        'intro': '오답노트 플랫폼', 
        'cause' : [
            '시험 준비 과정에서 손으로 작성하는 것보다 타이핑을 통해 오답노트를 정리하는 것이 시간적으로 더 효율적이라는 점에 착안하여 이 프로젝트를 시작하게 되고 문제를 풀고 복습함으로써 학습 효과가 더욱 향상될 것이라는 아이디어를 바탕으로 개발을 진행'
        ],
        'git': 'https://github.com/sonprogrammer/CAN', 
        'team' : false,
        'role': ['프론트엔드 + 백엔드'], 
        'func': [
            '아이디 기억하기 기능',
            '자신이 틀렸던 문제를 등록 기능', 
            '등록한 문제 검색 기능', 
            '간단 퀴즈 기능', 
            '실제 시험과 유사한 테스트 기능'
        ],
        'troubleS': [
            'React Router v6부터 useHistory가 제거되고 useNavigate 훅이 도입됨에 따라 기존에 useHistory를 사용한 라우팅 코드가 작동하지 않음. 이를 해결하기 위해 useNavigate로 코드를 수정하여 라우터 기능을 구현함',
            'app.use(express.json) 미들웨어의 위치가 잘못되어 JSON요청 데이터를 제대로 파싱하지 못하는 문제가 발생함. 이 미들웨어가 라우터 뒤에 배치되어 있었음. 그래서 이 라우터 선언 이전으로 위치시켜 해당 문제를 해결함',
            '인증 요청 시 req.user 값을 읽을 수 없었음. 이는 클라이언트에서 요청을 보낼 때 withCredentials: true를 추가하지 않아 쿠키가 포함되지 않았기 때문이였고 이를 해결하기 위해 클라이언트 요청에 withCredentials: true를 추가하여 인증 상태를 확인할 수 있도록 수정함. 또한, 서버에서 미들웨어 순서를 cors passport.initialize() express-session passport.session()순으로 변경하여 인증 흐름을 올바르게 처리함'
        ], 
        'reflection': '', 
        'pages': [],
        'skills': ['react.svg', 'typescript.svg', 'styled.svg', 'tailwind.svg', 'figma.svg', 'mongodb.svg', 'nodejs.svg']
    },
    {'title': 'BNTY (Be Next To You)', 
        'img': 'bnty.svg', 
        'desc': '트레이너와 회원간 소통 서비스',
        'intro': '트레이너와 피티를 받는 회원간의 소통 플랫폼', 
        'cause' : [
            '뉴스에서 트레이너가 회원들에게 부적절한 행동이나 욕설을 하는 사례와 회사가 사용자들의 개인정보를 판매한 소식을 접함. 이를 통해 개인의 사생활을 보호할 수 있는 방법에 대해 고민하게 되었고 회원과 트레이너가 개인 연락처가 아닌 사이트를 통해서만 소통할 수 있도록 하는 시스템을 개발하고자함',
            '트레이너로 잠시 일하면서 평소 불편사항들을 개선하면 좋을 것 같다고 생각하여 개발함'
        ],
        'git': 'https://github.com/sonprogrammer/BNTYpt', 
        'team' : false,
        'role': ['프론트엔드 + 백엔드'], 
        'func': [
            '카카오로그인&일반로그인 + 역할 선택 기능(트레이너 or 회원)',
            {'메인페이지': [
                '트레이너는 QR코드를 가지고 있고 회원이 QR코드를 스캔하는 즉시 트레이너와 회원은 연결',
                '트레이너는 수강등록 버튼을 통해 자신과 연결되어있는 회원들의 수강횟수를 등록',
                '회원은 남은 수강횟수를 메인 페이지에서 바로 확인 가능'
                ]
            },
            {'바디체크페이지': [
                '운동한 사진 업로드(본인 사진만 보임)'
            ]
            },
            {'달력페이지': [
                '하루 식단, 운동 내용을 기록 + 식단은 노란점, 운동은 파란 점으로 표시',
                '달력을 채움으로써 일정을 한눈에 확인가능'
            ]
            },
            {'채팅페이지': [
                '트레이너와 유저간 연락'
            ]
            },
            {'노트페이지': [
                '트레이너는 자신의 회원들을 선택후 해당 회원의 하루 운동 내용을 업로드', 
                '회원은 트레이너가 작성한 운동 기록 일지를 확인 가능'
            ]
            }
        ],
        'troubleS': ['여러 기능을 추가하려 했지만 페이지가 중복되고 사이트의 본질이 흐려지는 것 같아 결국 기능들을 제거하고 주제를 다시 정리'], 
        'reflection': 
        '이 경험을 통해 느낀점은 초기 계획의 중요성이다. 모든 기능을 혼자 개발하다 보니 욕심만 커져 구체적인 구상을 하지 못해 기능들이 일관성이 없는 느낌이 들었다. 이로 인해 계획과 디자인, 기능 등이 계속해서 변경되어 프로젝트가 지연되었다. 초기 계획이 명확하고 튼튼해야 그에 맞춰 진행을 원활하게 할 수 있고 중간에 발생할 수 있는 변경 사항등에 대해서도 효율적으로 대응할 수 있다는 것을 많이 느꼈다.', 
        'skills': ['react.svg', 'typescript.svg', 'styled.svg', 'tailwind.svg', 'figma.svg', 'mongodb.svg', 'nodejs.svg', 'axios.svg']
    },
    {'title': 'VC (Virtual Coin)', 
        'img': 'vc.svg', 
        'desc': '모의코인 투자 서비스',
        'intro': '', 
        'git': 'ㅇ', 
        'team' : false,
        'role': [], 
        'func': [],
        'troubleS': [], 
        'reflection': '', 
        'skills': []
    }
]